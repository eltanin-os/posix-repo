diff -Naur a/RichString.c b/RichString.c
--- a/RichString.c	2021-10-14 18:42:05.000000000 -0300
+++ b/RichString.c	2021-10-17 11:41:33.199885623 -0300
@@ -61,7 +61,7 @@
    int newLen = from + len;
    RichString_setLen(this, newLen);
    for (int i = from, j = 0; i < newLen; i++, j++) {
-      this->chptr[i] = (CharType) { .attr = attrs & 0xffffff, .chars = { (iswprint(data[j]) ? data[j] : '?') } };
+      this->chptr[i] = (CharType) { .attributes = attrs & 0xffffff, .chars = { (iswprint(data[j]) ? data[j] : '?') } };
    }
 
    return len;
@@ -87,7 +87,7 @@
       *columns -= cwidth;
       columnsWritten += cwidth;
 
-      this->chptr[pos] = (CharType) { .attr = attrs & 0xffffff, .chars = { c, '\0' } };
+      this->chptr[pos] = (CharType) { .attributes = attrs & 0xffffff, .chars = { c, '\0' } };
       pos++;
    }
 
@@ -101,7 +101,7 @@
    int newLen = from + len;
    RichString_setLen(this, newLen);
    for (int i = from, j = 0; i < newLen; i++, j++) {
-      this->chptr[i] = (CharType) { .attr = attrs & 0xffffff, .chars = { (isprint(data[j]) ? data[j] : '?') } };
+      this->chptr[i] = (CharType) { .attributes = attrs & 0xffffff, .chars = { (isprint(data[j]) ? data[j] : '?') } };
    }
 
    return len;
@@ -110,7 +110,7 @@
 inline void RichString_setAttrn(RichString* this, int attrs, int start, int charcount) {
    int end = CLAMP(start + charcount, 0, this->chlen);
    for (int i = start; i < end; i++) {
-      this->chptr[i].attr = attrs;
+      this->chptr[i].attributes = attrs;
    }
 }
 
@@ -119,7 +119,7 @@
    int newLen = from + count;
    RichString_setLen(this, newLen);
    for (int i = from; i < newLen; i++) {
-      this->chptr[i] = (CharType) { .attr = attrs, .chars = { c, 0 } };
+      this->chptr[i] = (CharType) { .attributes = attrs, .chars = { c, 0 } };
    }
 }
 
diff -Naur a/RichString.h b/RichString.h
--- a/RichString.h	2021-10-14 18:42:05.000000000 -0300
+++ b/RichString.h	2021-10-17 11:42:15.549883472 -0300
@@ -27,8 +27,8 @@
 #ifdef HAVE_LIBNCURSESW
 #define RichString_printVal(this, y, x) mvadd_wchstr(y, x, (this).chptr)
 #define RichString_printoffnVal(this, y, x, off, n) mvadd_wchnstr(y, x, (this).chptr + (off), n)
-#define RichString_getCharVal(this, i) ((this).chptr[i].chars[0])
-#define RichString_setChar(this, at, ch) do { (this)->chptr[(at)] = (CharType) { .chars = { ch, 0 } }; } while (0)
+#define RichString_getCharVal(this, i) ((this).chptr[i].vals[0])
+#define RichString_setChar(this, at, ch) do { (this)->chptr[(at)] = (CharType) { .vals = { ch, 0 } }; } while (0)
 #define CharType cchar_t
 #else
 #define RichString_printVal(this, y, x) mvaddchstr(y, x, (this).chptr)
